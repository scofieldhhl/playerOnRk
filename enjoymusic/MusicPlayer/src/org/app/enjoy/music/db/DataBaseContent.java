package org.app.enjoy.music.db;import android.content.ContentProvider;import android.content.ContentUris;import android.content.ContentValues;import android.content.UriMatcher;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteQueryBuilder;import android.net.Uri;import android.util.Log;import org.app.enjoy.music.tool.Contsant;/** * Created by victor on 2015/12/25. */public class DataBaseContent extends ContentProvider {	private String TAG = "DataBaseContent";	private static final int TB_CATEGORY 					= 1;	private static final int TB_CATEGORY_ID 				= 2;	private static final int TB_MUSIC 					= 3;	private static final int TB_MUSIC_ID 				= 4;    DataBase db;    private static final UriMatcher sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);    static{        sURIMatcher.addURI(Contsant.DbConfig.AUTHORITY, Contsant.TB.CATEGORY, TB_CATEGORY);        sURIMatcher.addURI(Contsant.DbConfig.AUTHORITY, Contsant.TB.CATEGORY + "/#", TB_CATEGORY_ID);        sURIMatcher.addURI(Contsant.DbConfig.AUTHORITY, Contsant.TB.MUSIC, TB_MUSIC);        sURIMatcher.addURI(Contsant.DbConfig.AUTHORITY, Contsant.TB.MUSIC + "/#", TB_MUSIC_ID);    }    @Override    public boolean onCreate() {        db = new DataBase(this.getContext(), null, null, 0);        return false;    }    @Override    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {        int type = sURIMatcher.match(uri);        Log.d(TAG,"query-type = " + type);        String id = "";        if(type % 2 == 0){        	if (uri.getPathSegments().size() > 1) {        		id = uri.getPathSegments().get(1);        	}        }        if(id != null && !id.equals("")){            if(selection == null){                selection = "_id" + id;                System.out.println("selection:" + selection);            }else{                selection = selection + "and _id" + id;            }        }        SQLiteDatabase sdb = db.getReadableDatabase();        SQLiteQueryBuilder sqb = new SQLiteQueryBuilder();        sqb.setTables(getTableName(uri));        Cursor cursor = sqb.query(sdb, projection, selection, selectionArgs, null, null, sortOrder);        return cursor;    }    @Override    public String getType(Uri uri) {        return null;    }    @Override    public Uri insert(Uri uri, ContentValues values) {        SQLiteDatabase sdb = db.getWritableDatabase();        String intsertUri = Contsant.DbConfig.URI_PATH + getTableName(uri);        long id = sdb.insert(intsertUri, null, values);        uri = ContentUris.withAppendedId(uri, id);        getContext().getContentResolver().notifyChange(uri, null);        return uri;    }    @Override    public int delete(Uri uri, String selection, String[] selectionArgs) {        SQLiteDatabase sdb = db.getWritableDatabase();        String rowId = uri.getPathSegments().get(1);        return sdb.delete(getTableName(uri), "_id=" + rowId, null);    }    @Override    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {        SQLiteDatabase sdb = db.getWritableDatabase();        String rowId = uri.getPathSegments().get(1);        return sdb.update(getTableName(uri), values, "_id = " + rowId, null);    }    private String getTableName (Uri uri) {    	int type = sURIMatcher.match(uri);    	String tableName = "";        switch (type) {		case TB_CATEGORY:			tableName = Contsant.TB.CATEGORY;			break;		case TB_CATEGORY_ID:			tableName = Contsant.TB.CATEGORY;			break;		case TB_MUSIC:			tableName = Contsant.TB.MUSIC;			break;		case TB_MUSIC_ID:			tableName = Contsant.TB.MUSIC;			break;		default:			break;		}        return tableName;    }}
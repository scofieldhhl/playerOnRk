package org.app.enjoy.music.frag;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Message;import android.support.v4.app.Fragment;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.inputmethod.InputMethodManager;import android.widget.AdapterView;import android.widget.EditText;import android.widget.ImageButton;import android.widget.ListView;import android.widget.Toast;import com.umeng.analytics.MobclickAgent;import org.app.enjoy.music.adapter.MusicListAdapter;import org.app.enjoy.music.data.MusicData;import org.app.enjoy.music.mode.DataObservable;import org.app.enjoy.music.service.MusicService;import org.app.enjoy.music.tool.Contsant;import org.app.enjoy.music.tool.LogTool;import org.app.enjoy.music.tool.Setting;import org.app.enjoy.music.tool.XfDialog;import org.app.enjoy.music.util.MusicUtil;import org.app.enjoy.music.util.SharePreferencesUtil;import org.app.enjoy.musicplayer.MusicActivity;import org.app.enjoy.musicplayer.PlayMusicActivity;import org.app.enjoy.musicplayer.R;import java.io.File;import java.io.Serializable;import java.util.ArrayList;import java.util.List;import java.util.Observable;import java.util.Observer;/** * Created by Administrator on 2016/6/2. */public class SearchMusicFragment extends Fragment implements View.OnClickListener,AdapterView.OnItemClickListener,        AdapterView.OnItemLongClickListener,Observer,View.OnKeyListener,View.OnTouchListener {    private String TAG = "SearchMusicFragment";    private String[] arrExtension = new String[]{"dsf","dff","dst","dsd", "wma", "aif", "aac"};    private View view;    private EditText mEtSearch;    private ImageButton mIbSearch;    private ListView mLvMusic;    private LayoutInflater inflater;//装载布局    private int currentPosition = -1;    private int lastLongClickPosition = -1;    private MusicListAdapter musicListAdapter;    private List<MusicData> musicDatas = new ArrayList<MusicData>();    private List<MusicData> searchMusicList = new ArrayList<MusicData>();    private InputMethodManager inputMethodManager;    private String currentMusicName;//当前播放音乐name    private boolean isMusicRemove;//是否有音乐被移除    private int currentPlayFrag;//当前播放的Fragment    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Contsant.Msg.UPDATE_PLAY_LIST:                    if (musicDatas != null && musicDatas.size() > 0) {                        if (musicListAdapter != null) {                            if (currentPosition != -1) {                                musicListAdapter.setDatas(searchMusicList);                                musicListAdapter.setCurrentPosition(currentPosition);                            }                        }                    } else {                        final XfDialog xfdialog = new XfDialog.Builder(getActivity()).setTitle(getResources().getString(R.string.tip)).                                setMessage(getResources().getString(R.string.dlg_not_found_music_tip)).                                setPositiveButton(getResources().getString(R.string.confrim), null).create();                        xfdialog.show();                    }                    break;                case Contsant.Msg.SEARCH_MUSIC_COMPLETE:                    if (musicDatas != null && musicDatas.size() > 0) {                        if (musicListAdapter != null) {                            //处理当前播放是其他fragment而用户又切换到了播放列表重新找到播放音乐的position                            if (currentPlayFrag != Contsant.Frag.SEARCH_MUSIC_FRAG) {                                int index = getPositionByMusicName();                                if (index != -1) {                                    currentPosition = index;                                    musicListAdapter.setDatas(searchMusicList);                                    musicListAdapter.setCurrentPosition(currentPosition);                                }                            } else {                                if (currentPosition != -1) {                                    musicListAdapter.setDatas(searchMusicList);                                    musicListAdapter.setCurrentPosition(currentPosition);                                }                            }                        }                    }                    break;                case Contsant.Msg.CURRENT_PLAY_POSITION_CHANGED:                    if (searchMusicList != null && searchMusicList.size() > 0) {                        if (musicListAdapter != null) {                            if (currentPosition != -1) {                                musicListAdapter.setDatas(searchMusicList);                                musicListAdapter.setCurrentPosition(currentPosition);                            }                        }                    }                    break;            }        }    };    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {        view = inflater.inflate(R.layout.frag_search, container, false);        return view;    }    private void initialize (View view) {        DataObservable.getInstance().addObserver(this);        inputMethodManager = (InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE);        mEtSearch = (EditText) view.findViewById(R.id.et_search);        mIbSearch = (ImageButton) view.findViewById(R.id.ib_search);        mLvMusic = (ListView) view.findViewById(R.id.lv_music);        mLvMusic.setOnItemClickListener(this);        mLvMusic.setOnItemLongClickListener(this);        inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);        mIbSearch.setOnClickListener(this);        musicListAdapter = new MusicListAdapter(getContext(),mLvMusic);        musicListAdapter.setDatas(searchMusicList);        mLvMusic.setAdapter(musicListAdapter);        mEtSearch.setOnFocusChangeListener(new View.OnFocusChangeListener() {            @Override            public void onFocusChange(View view, boolean b) {                if (b) {                    inputMethodManager.showSoftInput(mEtSearch, InputMethodManager.SHOW_FORCED);                } else {                    inputMethodManager.hideSoftInputFromWindow(mEtSearch.getWindowToken(), 0); //强制隐藏键盘                }            }        });    }    /**     * 显示MP3信息,其中_ids保存了所有音乐文件的_ID，用来确定到底要播放哪一首歌曲，_titles存放音乐名，用来显示在播放界面，     * 而_path存放音乐文件的路径（删除文件时会用到）。     */    private void initData () {        currentPlayFrag = SharePreferencesUtil.getInt(getContext(),Contsant.CURRENT_FRAG);        List<MusicData> musicList = MusicUtil.getAllSongs(getContext());        musicDatas.addAll(musicList);        mHandler.sendEmptyMessage(Contsant.Msg.UPDATE_PLAY_LIST);    }    @Override    public void onResume() {        super.onResume();        if (musicDatas != null) {            musicDatas.clear();        }        initialize(view);        //异步检索其他音频文件        new Thread(){            @Override            public void run() {                initData();                searchFiles(getSDPath());            }        }.start();        MobclickAgent.onResume(getActivity());    }    @Override    public void onPause() {        super.onPause();        MobclickAgent.onPause(getActivity());    }    /**     * 根据Position播放音乐     */    public void playMusic(int position, long seekPosition) {        if (searchMusicList.size() > 0) {            LogTool.i("play---startService");            Intent intent = new Intent();            Bundle bundle = new Bundle();            bundle.putSerializable(Contsant.MUSIC_LIST_KEY, (Serializable) searchMusicList);            bundle.putInt(Contsant.POSITION_KEY, position);            intent.putExtras(bundle);            intent.setAction("com.app.media.MUSIC_SERVICE");            intent.putExtra("op", Contsant.PlayStatus.PLAY);// 向服务传递数据            intent.setPackage(getActivity().getPackageName());            getActivity().startService(intent);        } else {            final XfDialog xfdialog = new XfDialog.Builder(getActivity()).setTitle(getResources().getString(R.string.tip)).                    setMessage(getResources().getString(R.string.dlg_not_found_music_tip)).                    setPositiveButton(getResources().getString(R.string.confrim), null).create();            xfdialog.show();        }    }    @Override    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {        playMusic(position, 0);        currentPosition = position;        currentMusicName = searchMusicList.get(position).title;        if (musicListAdapter != null) {            musicListAdapter.cancelLongClick(true);        }        if (musicListAdapter != null) {            musicListAdapter.setCurrentPosition(position);        }        Bundle bundle = new Bundle();        bundle.putSerializable(Contsant.MUSIC_LIST_KEY, (Serializable) searchMusicList);        bundle.putInt(Contsant.ACTION_KEY, Contsant.Action.MUSIC_LIST_ITEM_CLICK);        bundle.putInt(Contsant.POSITION_KEY, currentPosition);        DataObservable.getInstance().setData(bundle);    }    @Override    public boolean onItemLongClick(AdapterView<?> adapterView, View view, int position, long id) {        lastLongClickPosition = position;        if (musicListAdapter != null) {            musicListAdapter.cancelLongClick(false);            musicListAdapter.setCurrentLongPosition(position);        }        return true;    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof Bundle) {            Bundle bundle = (Bundle) data;            int action = bundle.getInt(Contsant.ACTION_KEY);            int position = bundle.getInt(Contsant.POSITION_KEY);            //如果有音乐被移除            if (action == Contsant.Action.REMOVE_MUSIC) {                isMusicRemove = true;            } else if (action == Contsant.Action.POSITION_CHANGED) {//后台发过来的播放位置改变前台同步改变                if(position < musicDatas.size()) {                    if (((MusicActivity) getActivity()).getCurrentPage() == 4) {                        if (currentPosition != position) {                            currentPosition = position;                        }                        mHandler.sendEmptyMessage(Contsant.Msg.CURRENT_PLAY_POSITION_CHANGED);                    }                }            }        }    }    @Override    public void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        super.onDestroy();    }    private void searchFiles (String path) {        long currentTime = System.currentTimeMillis();        Log.e(TAG,"searchFiles()......start");        GetFiles(path);        Log.e(TAG,"searchFiles()......end");        Log.e(TAG, "searchFiles()......耗时=" + (System.currentTimeMillis() - currentTime));        mHandler.sendEmptyMessage(Contsant.Msg.SEARCH_MUSIC_COMPLETE);    }    /**     * 遍历文件夹，搜索指定扩展名的文件     * isLastOne 是否是最后一条，true 则搜索最后一条记录完毕后通知list刷新数据     * */    public void GetFiles(String Path) {  //搜索目录，扩展名，是否进入子文件夹        if(Path == null || TextUtils.isEmpty(Path)){            return;        }        File[] files = new File(Path).listFiles();        if (files.length > 0) {            for (int i = 0; i < files.length; i++) {                File f = files[i];                if (f.isFile()) {                    String[] arrFile = f.getPath().split("\\.");                    if (arrFile != null && arrFile.length >0) {                        int length = arrFile.length;                        if(arrFile[length -1] != null){                            for(String str : arrExtension){                                if(arrFile[length -1].equalsIgnoreCase(str)){                                    MusicData md = new MusicData();                                    String[] arrFileName = f.getPath().split("/");                                    md.title = arrFile[length -1];                                    if(arrFileName != null && arrFileName.length > 0){                                        md.title = arrFileName[arrFileName.length - 1].substring(0,arrFileName[arrFileName.length - 1].indexOf("."));                                    }                                    md.duration = 0;                                    md.artist = "";                                    md.displayName = md.title;                                    md.data = f.getPath();                                    md.path = f.getPath();                                    LogTool.i( f.getPath());                                    md.size = String.valueOf(f.length());                                    musicDatas.add(md);                                    break;                                }                            }                        }                    }                } else if (f.isDirectory() && f.getPath().indexOf("/.") == -1) {  //忽略点文件（隐藏文件/文件夹）                    GetFiles(f.getPath());                }            }        }    }    public String getSDPath(){        File sdDir = null;        boolean sdCardExist = Environment.getExternalStorageState()                .equals(Environment.MEDIA_MOUNTED);   //判断sd卡是否存在        if(sdCardExist){            sdDir = Environment.getExternalStorageDirectory();//获取跟目录        }        if(sdDir != null){            return sdDir.toString();        }else{            return null;        }    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.ib_search:                inputMethodManager.hideSoftInputFromWindow(mEtSearch.getWindowToken(), 0); //强制隐藏键盘                String search = mEtSearch.getText().toString().trim();                if (TextUtils.isEmpty(search)) {                    Toast.makeText(getContext(),getContext().getResources().getString(R.string.search_tip),Toast.LENGTH_SHORT).show();                    return;                }                if (musicDatas != null && musicDatas.size() > 0) {                    if (searchMusicList != null) {                        searchMusicList.clear();                    }                    for (int i=0;i<musicDatas.size();i++) {                        if (musicDatas.get(i).title.contains(search)) {                            searchMusicList.add(musicDatas.get(i));                        }                    }                    if(searchMusicList == null || searchMusicList.size() == 0){                        Toast.makeText(getContext(),getContext().getResources().getString(R.string.search_tip_no_find),Toast.LENGTH_SHORT).show();                        return;                    }                    musicListAdapter.setDatas(searchMusicList);                    musicListAdapter.notifyDataSetChanged();                }                break;        }    }    private void showSysKeyBoard (boolean isShow) {        if (inputMethodManager != null && mEtSearch != null) {            if (isShow) {                inputMethodManager.showSoftInput(mEtSearch, InputMethodManager.SHOW_FORCED);            } else {                inputMethodManager.hideSoftInputFromWindow(mEtSearch.getWindowToken(), 0); //强制隐藏键盘            }        }    }    @Override    public boolean onKey(View v, int keyCode, KeyEvent event) {        Log.e(TAG,"keyCode = " + keyCode);        if (event.getAction() == KeyEvent.ACTION_UP) {            if (keyCode == KeyEvent.KEYCODE_ENTER || keyCode == 66) {                mIbSearch.performClick();                showSysKeyBoard(false);            }        }        return false;    }    @Override    public boolean onTouch(View view, MotionEvent motionEvent) {        switch (view.getId()) {            case R.id.et_search:                showSysKeyBoard(true);                break;        }        return false;    }    private int getPositionByMusicName () {        int position = -1;        if (searchMusicList == null || searchMusicList.size() == 0) {            return -1;        }        String currentMusicName = ((MusicActivity) getActivity()).getCurrentMusicName();        if (!TextUtils.isEmpty(currentMusicName)) {            for (int i=0;i<searchMusicList.size();i++) {                if (currentMusicName.equals(searchMusicList.get(i).title)) {                    position = i;                    break;                }            }        }        Log.e(TAG, "getPositionByMusicName-position = " + position);        return position;    }}
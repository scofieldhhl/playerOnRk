package org.app.enjoy.music.db;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.net.Uri;import android.text.TextUtils;import android.util.Log;import org.app.enjoy.music.data.MusicData;import org.app.enjoy.music.interfaces.DbInterface;import org.app.enjoy.music.tool.Contsant;import org.app.enjoy.musicplayer.R;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Map;/** * Created by victor on 2016/6/13. */public class DbDao implements DbInterface{    private String TAG = "DbDao";    private Context mContext;    private DataBase db;    private static DbDao dbDao;    public DbDao (Context context){        mContext = context;        db = new DataBase(mContext, null, null, 0);    }    public static DbDao getInstance (Context context) {        if (dbDao == null) {            dbDao = new DbDao(context);        }        return dbDao;    }    private void init() {        addCategory(mContext.getString(R.string.diy_fav));        addCategory(mContext.getString(R.string.diy_custom)+"1");        addCategory(mContext.getString(R.string.diy_custom)+"2");    }    @Override    public void addCategory(String category) {        Log.e(TAG, "addCategory()......");        if (!db.tabbleIsExist(Contsant.TB.CATEGORY)){            return;        }        List<String> datas = queryCategory(category);        if (datas != null && datas.size() > 0) {            int max = Integer.parseInt(category.substring(category.length() - 1));            category = mContext.getString(R.string.diy_custom) + (max + 1);            addCategory(category);            return;        }        if(!TextUtils.isEmpty(category)){            SQLiteDatabase sdb = db.getWritableDatabase();            try {                    ContentValues values = new ContentValues();                    values.put("category", category);                    sdb.insert(Contsant.TB.CATEGORY, null, values);            } catch (Exception e) {                // TODO: handle exception            }finally {                if (sdb != null) {                    sdb.close();                }            }        }    }    @Override    public void removeCategory(String category) {        Log.e(TAG, "removeCategory()......category = " + category);        if (!db.tabbleIsExist(Contsant.TB.CATEGORY)){        	return;        }        removeMusicByCategory(category);//删除这个类别的音乐        SQLiteDatabase sdb = db.getReadableDatabase();        try {            sdb.delete(Contsant.TB.CATEGORY, "category = ?",  new String[]{category});        } catch (Exception e) {            e.printStackTrace();        }finally {            if (sdb != null) {                sdb.close();            }        }    }    @Override    public List<String> queryCategory() {        List<String> categoryList = new ArrayList<>();        if (!db.tabbleIsExist(Contsant.TB.CATEGORY)){        	return categoryList;        }        Uri uri = Uri.parse(Contsant.DbConfig.URI_PATH + Contsant.TB.CATEGORY);        Cursor cursor = mContext.getContentResolver().query(uri,                null, null , null, null);        try {            int row = cursor.getCount();            if (row > 0) {                for (int i = 0; i < cursor.getCount(); i++) {                    cursor.moveToPosition(i);                    categoryList.add(cursor.getString(cursor.getColumnIndex("category")));                }            }        }catch (Exception e) {            e.printStackTrace();        } finally {            if (cursor != null) {                cursor.close();            }        }        if (categoryList == null || categoryList.size() == 0) {            init();            queryCategory();        }        return categoryList;    }    @Override    public List<String> queryCategory(String category) {        List<String> categoryList = new ArrayList<>();        if (!db.tabbleIsExist(Contsant.TB.CATEGORY)){            return categoryList;        }        Uri uri = Uri.parse(Contsant.DbConfig.URI_PATH + Contsant.TB.CATEGORY);        Cursor cursor = mContext.getContentResolver().query(uri,                null, "category = ?" , new String[] {category}, null);        try {            int row = cursor.getCount();            if (row > 0) {                for (int i = 0; i < cursor.getCount(); i++) {                    cursor.moveToPosition(i);                    categoryList.add(cursor.getString(cursor.getColumnIndex("category")));                }            }        }catch (Exception e) {            e.printStackTrace();        } finally {            if (cursor != null) {                cursor.close();            }        }        return categoryList;    }    @Override    public void clearTb(String tbName) {        Log.e(TAG, "clearTb()......tbName = " + tbName);        if (!db.tabbleIsExist(tbName)){            return;        }        SQLiteDatabase sdb = db.getReadableDatabase();        try {            sdb.delete(tbName, null, null);        } catch (Exception e) {            e.printStackTrace();        }finally {            if (sdb != null) {                sdb.close();            }        }    }    @Override    public void addMusic(MusicData musicData,String categoryType) {        Log.e(TAG, "addMusic()......categoryType=" + categoryType);        if (!db.tabbleIsExist(Contsant.TB.MUSIC)){            return;        }        List<MusicData> datas = queryMusicByCategoryAndId(categoryType,musicData.id);        if (datas != null && datas.size() > 0) {            //如果已经添加该歌曲则不再添加            return;        }        if(musicData != null){            SQLiteDatabase sdb = db.getWritableDatabase();            try {                ContentValues values = new ContentValues();                values.put("title", musicData.title);                values.put("duration", musicData.duration);                values.put("artist", musicData.artist);                values.put("id", musicData.id);                values.put("displayName", musicData.displayName);                values.put("data", musicData.data);                values.put("path", musicData.path);                values.put("albumId", musicData.albumId);                values.put("album", musicData.album);                values.put("size", musicData.size);                values.put("category_type", categoryType);                sdb.insert(Contsant.TB.MUSIC, null, values);            } catch (Exception e) {                // TODO: handle exception            }finally {                if (sdb != null) {                    sdb.close();                }            }        }    }    @Override    public void removeMusic(int id) {        Log.e(TAG, "removeMusic()......id = " + id);        if (!db.tabbleIsExist(Contsant.TB.MUSIC)){            return;        }        SQLiteDatabase sdb = db.getReadableDatabase();        try {            sdb.delete(Contsant.TB.MUSIC, "id = ?",  new String[]{String.valueOf(id)});        } catch (Exception e) {            e.printStackTrace();        }finally {            if (sdb != null) {                sdb.close();            }        }    }    @Override    public void removeMusicByCategory(String category) {        Log.e(TAG, "removeMusicByCategory()......category = " + category);        if (!db.tabbleIsExist(Contsant.TB.MUSIC)){            return;        }        SQLiteDatabase sdb = db.getReadableDatabase();        try {            sdb.delete(Contsant.TB.MUSIC, "category_type = ?",  new String[]{String.valueOf(category)});        } catch (Exception e) {            e.printStackTrace();        }finally {            if (sdb != null) {                sdb.close();            }        }    }    @Override    public List<MusicData> queryMusicByCategory(String category) {        Log.e(TAG, "queryMusicByCategory()......category = " + category);        List<MusicData> musicDatas = new ArrayList<>();        if (!db.tabbleIsExist(Contsant.TB.MUSIC)){            return musicDatas;        }        Uri uri = Uri.parse(Contsant.DbConfig.URI_PATH + Contsant.TB.MUSIC);        Cursor cursor = mContext.getContentResolver().query(uri,                null, "category_type = ?" , new String[] {category}, null);        try {            int row = cursor.getCount();            if (row > 0) {                for (int i = 0; i < cursor.getCount(); i++) {                    cursor.moveToPosition(i);                    MusicData info = new MusicData();                    info.title = cursor.getString(cursor.getColumnIndex("title"));                    info.duration = cursor.getLong(cursor.getColumnIndex("duration"));                    info.artist = cursor.getString(cursor.getColumnIndex("artist"));                    info.id = cursor.getInt(cursor.getColumnIndex("id"));                    info.displayName = cursor.getString(cursor.getColumnIndex("displayName"));                    info.data = cursor.getString(cursor.getColumnIndex("data"));                    info.path = cursor.getString(cursor.getColumnIndex("path"));                    info.albumId = cursor.getString(cursor.getColumnIndex("albumId"));                    info.album = cursor.getString(cursor.getColumnIndex("album"));                    info.size = cursor.getString(cursor.getColumnIndex("size"));                    info.categoryType = cursor.getString(cursor.getColumnIndex("category_type"));                    musicDatas.add(info);                }            }        }catch (Exception e) {            e.printStackTrace();        } finally {            if (cursor != null) {                cursor.close();            }        }        return musicDatas;    }    @Override    public List<MusicData> queryMusicByArtist(String artist) {        Log.e(TAG, "queryMusicByArtist()......artist = " + artist);        List<MusicData> musicDatas = new ArrayList<>();        if (!db.tabbleIsExist(Contsant.TB.MUSIC)){            return musicDatas;        }        Uri uri = Uri.parse(Contsant.DbConfig.URI_PATH + Contsant.TB.MUSIC);        Cursor cursor = mContext.getContentResolver().query(uri,                null, "artist = ?" , new String[] {artist}, null);        try {            int row = cursor.getCount();            if (row > 0) {                for (int i = 0; i < cursor.getCount(); i++) {                    cursor.moveToPosition(i);                    MusicData info = new MusicData();                    info.title = cursor.getString(cursor.getColumnIndex("title"));                    info.duration = cursor.getLong(cursor.getColumnIndex("duration"));                    info.artist = cursor.getString(cursor.getColumnIndex("artist"));                    info.id = cursor.getInt(cursor.getColumnIndex("id"));                    info.displayName = cursor.getString(cursor.getColumnIndex("displayName"));                    info.data = cursor.getString(cursor.getColumnIndex("data"));                    info.path = cursor.getString(cursor.getColumnIndex("path"));                    info.albumId = cursor.getString(cursor.getColumnIndex("albumId"));                    info.album = cursor.getString(cursor.getColumnIndex("album"));                    info.size = cursor.getString(cursor.getColumnIndex("size"));                    info.categoryType = cursor.getString(cursor.getColumnIndex("category_type"));                    musicDatas.add(info);                }            }        }catch (Exception e) {            e.printStackTrace();        } finally {            if (cursor != null) {                cursor.close();            }        }        return musicDatas;    }    @Override    public List<MusicData> queryMusicByAlbum(String albumId) {        Log.e(TAG, "queryMusicByAlbum()......albumId = " + albumId);        List<MusicData> musicDatas = new ArrayList<>();        if (!db.tabbleIsExist(Contsant.TB.MUSIC)){            return musicDatas;        }        Uri uri = Uri.parse(Contsant.DbConfig.URI_PATH + Contsant.TB.MUSIC);        Cursor cursor = mContext.getContentResolver().query(uri,                null, "albumId = ?" , new String[] {albumId}, null);        try {            int row = cursor.getCount();            if (row > 0) {                for (int i = 0; i < cursor.getCount(); i++) {                    cursor.moveToPosition(i);                    MusicData info = new MusicData();                    info.title = cursor.getString(cursor.getColumnIndex("title"));                    info.duration = cursor.getLong(cursor.getColumnIndex("duration"));                    info.artist = cursor.getString(cursor.getColumnIndex("artist"));                    info.id = cursor.getInt(cursor.getColumnIndex("id"));                    info.displayName = cursor.getString(cursor.getColumnIndex("displayName"));                    info.data = cursor.getString(cursor.getColumnIndex("data"));                    info.path = cursor.getString(cursor.getColumnIndex("path"));                    info.albumId = cursor.getString(cursor.getColumnIndex("albumId"));                    info.album = cursor.getString(cursor.getColumnIndex("album"));                    info.size = cursor.getString(cursor.getColumnIndex("size"));                    info.categoryType = cursor.getString(cursor.getColumnIndex("category_type"));                    musicDatas.add(info);                }            }        }catch (Exception e) {            e.printStackTrace();        } finally {            if (cursor != null) {                cursor.close();            }        }        return musicDatas;    }    @Override    public List<MusicData> queryMusicByCategoryAndId(String category, int id) {        Log.e(TAG, "queryMusicByCategoryAndId()......");        List<MusicData> musicDatas = new ArrayList<>();        if (!db.tabbleIsExist(Contsant.TB.MUSIC)){            return musicDatas;        }        Uri uri = Uri.parse(Contsant.DbConfig.URI_PATH + Contsant.TB.MUSIC);        Cursor cursor = mContext.getContentResolver().query(uri,                null, "category_type = ? and id = ?" , new String[] {category,String.valueOf(id)}, null);        try {            int row = cursor.getCount();            if (row > 0) {                for (int i = 0; i < cursor.getCount(); i++) {                    cursor.moveToPosition(i);                    MusicData info = new MusicData();                    info.title = cursor.getString(cursor.getColumnIndex("title"));                    info.duration = cursor.getLong(cursor.getColumnIndex("duration"));                    info.artist = cursor.getString(cursor.getColumnIndex("artist"));                    info.id = cursor.getInt(cursor.getColumnIndex("id"));                    info.displayName = cursor.getString(cursor.getColumnIndex("displayName"));                    info.data = cursor.getString(cursor.getColumnIndex("data"));                    info.path = cursor.getString(cursor.getColumnIndex("path"));                    info.albumId = cursor.getString(cursor.getColumnIndex("albumId"));                    info.album = cursor.getString(cursor.getColumnIndex("album"));                    info.size = cursor.getString(cursor.getColumnIndex("size"));                    info.categoryType = cursor.getString(cursor.getColumnIndex("category_type"));                    musicDatas.add(info);                }            }        }catch (Exception e) {            e.printStackTrace();        } finally {            if (cursor != null) {                cursor.close();            }        }        return musicDatas;    }}